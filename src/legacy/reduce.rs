use std::collections::VecDeque;
use std::io::{self, copy, Read, Result};

use thiserror::Error;

use crate::legacy::lz77::lz77_output_backref;

use super::bitstream::{lsb, BitStream};

#[derive(Error, Debug)]
enum ReduceError {
    #[error("Invalid follower set")]
    InvalidFollowerSet,
    #[error("Error reading next byte")]
    ErrorReadingNextByte,
}

/// Number of bits used to represent indices in a follower set of size n.
fn follower_idx_bw(n: u8) -> u8 {
    assert!(n <= 32);

    if n > 16 {
        return 5;
    }
    if n > 8 {
        return 4;
    }
    if n > 4 {
        return 3;
    }
    if n > 2 {
        return 2;
    }
    if n > 0 {
        return 1;
    }
    return 0;
}

#[derive(Default, Clone, Copy)]
struct FollowerSet {
    size: u8,
    idx_bw: u8,
    followers: [u8; 32],
}

/// Read the follower sets from is into fsets. Returns true on success.
fn read_follower_sets(is: &mut BitStream, fsets: &mut [FollowerSet]) -> bool {
    for i in (0..=255 as usize).rev() {
        let n = lsb(is.bits(), 6) as u8;
        if n > 32 {
            return false;
        }
        if !is.advance(6) {
            return false;
        }
        fsets[i].size = n;
        fsets[i].idx_bw = follower_idx_bw(n);

        for j in 0..fsets[i].size as usize {
            fsets[i].followers[j] = is.bits() as u8;
            if !is.advance(8) {
                return false;
            }
        }
    }

    return true;
}

/// Read the next byte from is, decoded based on prev_byte and the follower sets.
/// The byte is returned in *out_byte. The function returns true on success,
/// and false on bad data or end of input.
fn read_next_byte(
    is: &mut BitStream,
    prev_byte: u8,
    fsets: &mut [FollowerSet],
    out_byte: &mut u8,
) -> bool {
    let bits = is.bits();

    if fsets[prev_byte as usize].size == 0 {
        // No followers; read a literal byte.
        *out_byte = bits as u8;
        return is.advance(8);
    }

    if lsb(bits, 1) == 1 {
        // Don't use the follower set; read a literal byte.
        *out_byte = (bits >> 1) as u8;
        return is.advance(1 + 8);
    }

    // The bits represent the index of a follower byte.
    let idx_bw = fsets[prev_byte as usize].idx_bw;
    let follower_idx = lsb(bits >> 1, idx_bw) as usize;
    if follower_idx >= fsets[prev_byte as usize].size as usize {
        return false;
    }
    *out_byte = fsets[prev_byte as usize].followers[follower_idx];
    return is.advance(1 + idx_bw);
}

fn max_len(comp_factor: u8) -> usize {
    let v_len_bits = (8 - comp_factor) as usize;

    assert!(comp_factor >= 1 && comp_factor <= 4);

    // Bits in V + extra len byte + implicit 3.
    ((1 << v_len_bits) - 1) + 255 + 3
}

fn max_dist(comp_factor: u8) -> usize {
    let v_dist_bits = comp_factor as usize;

    assert!(comp_factor >= 1 && comp_factor <= 4);

    // Bits in V * 256 + W byte + implicit 1. */
    ((1 << v_dist_bits) - 1) * 256 + 255 + 1
}

const DLE_BYTE: u8 = 144;

fn hwexpand(
    src: &[u8],
    src_len: usize,
    uncomp_len: usize,
    comp_factor: u8,
    src_used: &mut usize,
    dst: &mut VecDeque<u8>,
) -> core::result::Result<(), ReduceError> {
    let mut fsets = [FollowerSet::default(); 256];
    assert!(comp_factor >= 1 && comp_factor <= 4);

    let mut is = BitStream::new(src, src_len);
    if !read_follower_sets(&mut is, &mut fsets) {
        return Err(ReduceError::InvalidFollowerSet);
    }

    // Number of bits in V used for backref length.
    let v_len_bits = 8 - comp_factor;

    let mut curr_byte = 0; // The first "previous byte" is implicitly zero.

    while dst.len() < uncomp_len {
        // Read a literal byte or DLE marker.
        if !read_next_byte(&mut is, curr_byte, &mut fsets, &mut curr_byte) {
            return Err(ReduceError::ErrorReadingNextByte);
        }
        if curr_byte != DLE_BYTE {
            // Output a literal byte.
            dst.push_back(curr_byte);
            continue;
        }

        // Read the V byte which determines the length.
        if !read_next_byte(&mut is, curr_byte, &mut fsets, &mut curr_byte) {
            return Err(ReduceError::ErrorReadingNextByte);
        }
        if curr_byte == 0 {
            // Output a literal DLE byte.
            dst.push_back(DLE_BYTE);
            continue;
        }
        let v = curr_byte;
        let mut len = lsb(v as u64, v_len_bits) as usize;
        if len == (1 << v_len_bits) - 1 {
            // Read an extra length byte.
            if !read_next_byte(&mut is, curr_byte, &mut fsets, &mut curr_byte) {
                return Err(ReduceError::ErrorReadingNextByte);
            }
            len += curr_byte as usize;
        }
        len += 3;

        // Read the W byte, which together with V gives the distance.
        if !read_next_byte(&mut is, curr_byte, &mut fsets, &mut curr_byte) {
            return Err(ReduceError::ErrorReadingNextByte);
        }
        let dist = ((v as usize) >> v_len_bits) * 256 + curr_byte as usize + 1;

        assert!(len <= max_len(comp_factor));
        assert!(dist as usize <= max_dist(comp_factor));

        // Output the back reference.
        if len <= uncomp_len - dst.len() && dist as usize <= dst.len() {
            // Enough room and no implicit zeros; chunked copy.
            lz77_output_backref(dst, dist as usize, len);
        } else {
            // Copy, handling overlap and implicit zeros.
            for _i in 0..len {
                if dist as usize > dst.len() {
                    dst.push_back(0);
                    continue;
                }
                dst.push_back(dst[dst.len() - dist as usize]);
            }
        }
    }

    *src_used = is.bytes_read();

    Ok(())
}

#[derive(Debug)]
pub struct ReduceDecoder<R> {
    compressed_reader: R,
    uncompressed_size: u64,
    stream_read: bool,
    comp_factor: u8,
    stream: VecDeque<u8>,
}

impl<R: Read> ReduceDecoder<R> {
    pub fn new(inner: R, uncompressed_size: u64, comp_factor: u8) -> Self {
        ReduceDecoder {
            compressed_reader: inner,
            uncompressed_size,
            stream_read: false,
            comp_factor,
            stream: VecDeque::new(),
        }
    }

    pub fn finish(mut self) -> Result<VecDeque<u8>> {
        copy(&mut self.compressed_reader, &mut self.stream)?;
        Ok(self.stream)
    }
}

impl<R: Read> Read for ReduceDecoder<R> {
    fn read(&mut self, buf: &mut [u8]) -> Result<usize> {
        if !self.stream_read {
            self.stream_read = true;
            let mut compressed_bytes = Vec::new();
            if let Err(err) = self.compressed_reader.read_to_end(&mut compressed_bytes) {
                return Err(err.into());
            }
            let mut src_used = 0;
            if let Err(err) = hwexpand(
                &compressed_bytes,
                compressed_bytes.len(),
                self.uncompressed_size as usize,
                self.comp_factor,
                &mut src_used,
                &mut self.stream,
            ) {
                return Err(io::Error::new(io::ErrorKind::InvalidData, err.to_string()));
            }
        }
        let bytes_read = self.stream.len().min(buf.len());
        buf[..bytes_read].copy_from_slice(&self.stream.drain(..bytes_read).collect::<Vec<u8>>());
        Ok(bytes_read)
    }
}

#[cfg(test)]
mod tests {
    use std::collections::VecDeque;

    use super::hwexpand;

    const HAMLET_2048: [u8; 1285] = [
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x58, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x01, 0x0f, 0x06, 0x11,
        0x31, 0x21, 0x1f, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x04, 0x99, 0x00, 0x00, 0x00, 0x00, 0x20, 0x80, 0xbc, 0x01, 0xc4, 0x5d, 0x1a, 0x5a, 0x98,
        0x50, 0x06, 0x49, 0xcc, 0xb9, 0xd1, 0x91, 0x11, 0x65, 0x20, 0x68, 0x73, 0x04, 0x08, 0x24,
        0x5d, 0x19, 0x51, 0x06, 0x02, 0x99, 0x06, 0x08, 0x6c, 0x61, 0x84, 0x9c, 0x5b, 0x1d, 0x1d,
        0x02, 0xf9, 0x76, 0x46, 0x36, 0x46, 0x57, 0x96, 0x26, 0x40, 0x86, 0x11, 0x65, 0x61, 0x90,
        0x6c, 0x00, 0x40, 0xb8, 0xd1, 0xcd, 0xd5, 0x09, 0x61, 0x65, 0x02, 0x64, 0x9d, 0xf0, 0x06,
        0x42, 0x40, 0xca, 0xb9, 0x81, 0x10, 0x20, 0x90, 0x69, 0x65, 0x04, 0x24, 0xdd, 0x1b, 0x9a,
        0x50, 0xa6, 0x4e, 0xc8, 0xd1, 0xb9, 0xcd, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
        0x00, 0xe9, 0x22, 0x50, 0x11, 0x11, 0x20, 0x68, 0x52, 0x49, 0x80, 0x40, 0x15, 0x04, 0x00,
        0x80, 0xf0, 0x26, 0x04, 0x08, 0x61, 0x41, 0x02, 0x24, 0x08, 0x00, 0x08, 0x4f, 0x45, 0x00,
        0x20, 0x48, 0x39, 0x09, 0x61, 0x45, 0x02, 0x1a, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
        0x00, 0x02, 0x09, 0x00, 0x00, 0x00, 0x00, 0x02, 0xa4, 0x1b, 0x00, 0x00, 0x80, 0x00, 0xd2,
        0x00, 0x08, 0x20, 0x90, 0x80, 0xa0, 0x22, 0x0e, 0x00, 0x01, 0x24, 0x00, 0x00, 0x00, 0x00,
        0x20, 0x77, 0x61, 0x53, 0x6f, 0x50, 0x45, 0x90, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x28, 0x00, 0x80, 0x00, 0x09, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xef, 0xbb, 0xbf, 0x0d, 0x28, 0xf7, 0xad, 0x5a, 0xd9,
        0x31, 0xe9, 0x51, 0x1d, 0xc1, 0x62, 0xe8, 0x59, 0x10, 0x2d, 0xf4, 0xf6, 0xed, 0x1a, 0x88,
        0x35, 0x33, 0xd2, 0xb0, 0x6d, 0xd9, 0x90, 0x2e, 0x0b, 0xc5, 0xe6, 0xf1, 0x2a, 0x2d, 0x9b,
        0xa7, 0x0d, 0xdb, 0x16, 0x84, 0xd0, 0xb8, 0x56, 0x76, 0x2e, 0xdc, 0xb2, 0x61, 0xc0, 0x06,
        0x36, 0x90, 0x4a, 0xd3, 0x88, 0x65, 0xf0, 0x97, 0x34, 0xa2, 0x19, 0x50, 0x3a, 0xea, 0x75,
        0x30, 0xc0, 0x27, 0x8c, 0xf3, 0x14, 0x03, 0x0c, 0xee, 0xa8, 0xe0, 0x69, 0x00, 0xef, 0xa8,
        0xea, 0xe6, 0x42, 0x32, 0x10, 0xdd, 0x30, 0xe1, 0x1c, 0x84, 0xb6, 0x81, 0x6d, 0xdf, 0xce,
        0x51, 0x66, 0x2a, 0xb9, 0x48, 0x67, 0x01, 0x1f, 0x24, 0x20, 0xbd, 0xfb, 0x86, 0x6c, 0xc9,
        0x20, 0x52, 0x37, 0x09, 0x72, 0x0c, 0x30, 0x12, 0x46, 0x03, 0x48, 0x0c, 0x22, 0xd9, 0xe8,
        0x33, 0xca, 0x06, 0xca, 0xe1, 0x1c, 0xcb, 0xf9, 0x98, 0xa6, 0x7d, 0xd3, 0x39, 0x00, 0x91,
        0xbf, 0x2d, 0x6b, 0x87, 0xba, 0x10, 0x64, 0xd6, 0x1b, 0x83, 0x6c, 0x73, 0x1e, 0xc7, 0x18,
        0x6e, 0x1e, 0xd3, 0x94, 0x85, 0x67, 0xd3, 0xda, 0xe1, 0x69, 0x92, 0xbc, 0xf3, 0x3c, 0x0c,
        0x2a, 0x87, 0x2d, 0x90, 0xb0, 0x9a, 0xa6, 0x0d, 0xac, 0x93, 0x19, 0x07, 0x7a, 0xe9, 0xa0,
        0x6d, 0x50, 0x20, 0x24, 0x03, 0x74, 0x30, 0x4d, 0x3b, 0xb6, 0x8c, 0x00, 0x34, 0x6e, 0x98,
        0x6d, 0x9d, 0x8d, 0x04, 0x8f, 0x74, 0x9c, 0xc6, 0x0d, 0x70, 0x22, 0xe1, 0x0d, 0x32, 0x65,
        0x9b, 0x16, 0x12, 0xf4, 0xe9, 0x04, 0x40, 0x97, 0x67, 0xac, 0xd0, 0x72, 0xf9, 0x86, 0x67,
        0x5d, 0x08, 0x32, 0xc9, 0xcc, 0x79, 0x32, 0x88, 0x00, 0xee, 0x26, 0x56, 0xb6, 0x6f, 0xc7,
        0x86, 0x85, 0xb4, 0x08, 0xc8, 0x13, 0x1f, 0x0d, 0x50, 0x03, 0x24, 0x8b, 0xa0, 0x22, 0xb0,
        0x39, 0x48, 0x34, 0xda, 0xe1, 0x74, 0xdf, 0x82, 0x1c, 0xb3, 0xc7, 0xae, 0x41, 0x96, 0x40,
        0xcb, 0xa6, 0x77, 0x21, 0x5b, 0xac, 0x8c, 0x91, 0xd2, 0x72, 0xf3, 0xe0, 0x13, 0x6b, 0x79,
        0x72, 0x03, 0x00, 0x18, 0xe4, 0x02, 0x2e, 0x31, 0x9a, 0x01, 0x9a, 0x66, 0x1a, 0x08, 0x6f,
        0x05, 0x59, 0x56, 0xec, 0xdb, 0xb7, 0x6b, 0x2e, 0x21, 0xad, 0x18, 0xb2, 0x44, 0x72, 0x9a,
        0xb2, 0xa1, 0x8e, 0x29, 0xe4, 0x21, 0x4d, 0x3b, 0xa8, 0x8e, 0xfc, 0x86, 0x3a, 0xb2, 0x41,
        0xbe, 0xd4, 0xb2, 0x6c, 0x18, 0x66, 0x3b, 0x11, 0x42, 0x1d, 0x3a, 0xd1, 0x8e, 0x6d, 0xc5,
        0x90, 0xc6, 0xe4, 0xe4, 0xe0, 0x80, 0xdc, 0x82, 0x3c, 0x12, 0x34, 0x12, 0x53, 0x23, 0x43,
        0xd3, 0xd5, 0x40, 0x26, 0x4c, 0xad, 0x0a, 0x97, 0x4c, 0x40, 0xae, 0x03, 0x95, 0x85, 0x4b,
        0x17, 0xf2, 0xc0, 0xca, 0x4c, 0x18, 0x16, 0xca, 0xc0, 0xc4, 0xe4, 0x40, 0x2a, 0x52, 0x26,
        0x48, 0x0e, 0x7b, 0xb6, 0xac, 0x0e, 0xda, 0x8d, 0xb2, 0x4d, 0x63, 0xb4, 0x90, 0xda, 0x35,
        0x04, 0x18, 0x76, 0x4c, 0x90, 0xce, 0x39, 0x9d, 0x96, 0x11, 0x99, 0x8c, 0xa0, 0x3a, 0xac,
        0xa2, 0x51, 0x0b, 0x0e, 0xa4, 0xfa, 0xa9, 0x40, 0x10, 0xa2, 0x1a, 0x24, 0x05, 0x3e, 0x19,
        0x81, 0xa4, 0x8a, 0x34, 0x69, 0x0a, 0x04, 0xa5, 0x3e, 0x29, 0x15, 0x1d, 0x12, 0x8f, 0xaa,
        0x58, 0xa4, 0x45, 0x3c, 0x02, 0xd1, 0x42, 0x4f, 0x4f, 0x4b, 0x46, 0x1a, 0xd4, 0xc4, 0xb4,
        0x28, 0x15, 0xaa, 0x40, 0x48, 0x82, 0x87, 0x2c, 0xa2, 0x4b, 0x87, 0x78, 0x74, 0x02, 0x1b,
        0x5e, 0x0e, 0xe1, 0x04, 0x0d, 0x25, 0x8f, 0x44, 0xd3, 0x86, 0xb1, 0x1b, 0xbb, 0x50, 0xd9,
        0x30, 0x42, 0x8a, 0x0f, 0xaa, 0x48, 0x06, 0x49, 0x45, 0x8f, 0x8a, 0x12, 0xcd, 0x82, 0x04,
        0x35, 0xc8, 0x03, 0x4d, 0x2c, 0xa0, 0xd4, 0x24, 0xa7, 0x43, 0x8b, 0x42, 0x02, 0x1f, 0x91,
        0x6e, 0x0a, 0x92, 0xba, 0xc4, 0x8a, 0xa6, 0x06, 0xf8, 0x83, 0x30, 0xc3, 0x83, 0x91, 0xa1,
        0x6f, 0x52, 0x50, 0xad, 0x12, 0x6e, 0x87, 0xc4, 0xa4, 0x06, 0x4e, 0x8d, 0x2d, 0x23, 0x7b,
        0x92, 0x0b, 0x9a, 0xed, 0xdc, 0x34, 0x08, 0xd0, 0x85, 0x41, 0x20, 0x8e, 0xd4, 0x0c, 0x6c,
        0x63, 0x05, 0x31, 0x24, 0x8e, 0x1d, 0x1a, 0x66, 0x66, 0x43, 0x97, 0x90, 0x14, 0x03, 0x99,
        0x41, 0x46, 0xee, 0xdb, 0xb7, 0x6d, 0xa0, 0xf0, 0x9c, 0xb0, 0x0c, 0x6b, 0xf2, 0x42, 0x1e,
        0x98, 0xe1, 0x81, 0x4c, 0x12, 0x24, 0xa5, 0xa4, 0x21, 0x08, 0xbe, 0x65, 0xfb, 0x26, 0x37,
        0x8a, 0xc3, 0x1c, 0xa2, 0x7d, 0x23, 0x14, 0x81, 0xcb, 0x4a, 0x52, 0x49, 0xd0, 0x21, 0x24,
        0xd5, 0xb5, 0x02, 0x3a, 0xdb, 0xd0, 0x2b, 0x39, 0x6c, 0xfb, 0x66, 0xa0, 0x4c, 0x2f, 0xe4,
        0x1a, 0x5e, 0x48, 0x0a, 0x85, 0x4c, 0xc0, 0x0d, 0x39, 0xa1, 0x1b, 0x52, 0x28, 0xec, 0xac,
        0xf0, 0x13, 0x52, 0x06, 0xa4, 0x42, 0x0a, 0xc1, 0x14, 0x24, 0x17, 0x7c, 0x04, 0x81, 0x44,
        0x23, 0x9b, 0x29, 0x07, 0x20, 0x2c, 0x0f, 0x42, 0x90, 0xd0, 0xee, 0x06, 0x87, 0x96, 0x42,
        0x8a, 0x42, 0x4a, 0x2b, 0x64, 0x63, 0x12, 0x52, 0x14, 0x84, 0x9c, 0x71, 0x0a, 0x29, 0x11,
        0x27, 0x94, 0x68, 0x84, 0x43, 0xd3, 0x00, 0xa3, 0xd4, 0x88, 0x96, 0x71, 0x9b, 0x20, 0x82,
        0x43, 0xb6, 0x58, 0x85, 0xec, 0x02, 0x33, 0xc1, 0x8a, 0x15, 0x42, 0x71, 0x69, 0x85, 0x3c,
        0xfc, 0x42, 0x1e, 0xa9, 0x86, 0xbc, 0xf1, 0x30, 0xe6, 0x75, 0xe5, 0x8e, 0x79, 0xde, 0x30,
        0x24, 0x13, 0x4b, 0x6c, 0x42, 0x0e, 0x3b, 0x96, 0xa8, 0xdc, 0xb0, 0x6d, 0x6a, 0x1a, 0x81,
        0x65, 0x3a, 0xf7, 0x4d, 0x87, 0x4d, 0x21, 0x87, 0xc5, 0x83, 0x6c, 0x13, 0x28, 0x67, 0x20,
        0x8a, 0x6d, 0xe3, 0xc1, 0xfb, 0x50, 0x26, 0xab, 0x9c, 0x54, 0x75, 0x8a, 0x85, 0x4b, 0x0c,
        0x62, 0x87, 0x7c, 0xb0, 0xc1, 0x62, 0xb2, 0xd1, 0x90, 0x45, 0xc4, 0x15, 0xa2, 0xcc, 0x0f,
        0xa4, 0x62, 0x1f, 0x21, 0x31, 0x45, 0x15, 0x72, 0x59, 0xba, 0x6c, 0xc4, 0x98, 0xb5, 0x34,
        0x10, 0x15, 0xba, 0x34, 0x1b, 0x16, 0x72, 0x58, 0x4f, 0x17, 0x79, 0x54, 0x04, 0x5c, 0xa5,
        0x59, 0x2c, 0x66, 0x54, 0xdd, 0xb2, 0x65, 0x84, 0x0a, 0xaf, 0xda, 0x28, 0xf6, 0x98, 0x85,
        0x6e, 0xf2, 0x2e, 0x08, 0xa8, 0x59, 0xc8, 0x72, 0x13, 0x86, 0xb2, 0x69, 0x9d, 0x69, 0x74,
        0x11, 0x9f, 0x98, 0x3e, 0x39, 0x85, 0x74, 0x4e, 0xa6, 0x6f, 0x48, 0x86, 0x43, 0x10, 0x72,
        0xd4, 0x0d, 0xa4, 0xd1, 0xba, 0x48, 0x26, 0x8b, 0x60, 0xd1, 0x29, 0x16, 0xe8, 0x4d, 0x30,
        0x2a, 0x1d, 0x72, 0xcd, 0xa4, 0x8b, 0x7c, 0x82, 0x42, 0x32, 0xd3, 0xa4, 0x20, 0x16, 0x12,
        0xb1, 0xee, 0x59, 0xb4, 0x90, 0xa3, 0x26, 0x20, 0x2f, 0x7c, 0x20, 0x21, 0x25, 0x95, 0x9f,
        0x58, 0x68, 0x24, 0xe7, 0x65, 0x34, 0x0d, 0x7b, 0xc2, 0xb9, 0xbe, 0x2e, 0xd2, 0xe8, 0x49,
        0x0a, 0x3b, 0x29, 0xe5, 0x14, 0xe4, 0x0c, 0x18, 0x27, 0x00,
    ];

    #[test]
    fn test_expand_hamlet2048() {
        let mut dst = VecDeque::new();
        let mut src_used = 0;
        hwexpand(
            &HAMLET_2048,
            HAMLET_2048.len(),
            2048,
            4,
            &mut src_used,
            &mut dst,
        )
        .unwrap();
        assert_eq!(dst.len(), 2048);
    }

    /*
      Put some text first to make PKZIP actually use Reduce compression.
      Target the code path which copies a zero when dist > current position.

      $ curl -O http://cd.textfiles.com/originalsw/25/pkz092.exe
      $ dosbox -c "mount c ." -c "c:" -c "pkz092" -c "exit"
      $ dd if=hamlet.txt bs=1 count=2048 > a
      $ dd if=/dev/zero  bs=1 count=1024 >> a
      $ dosbox -c "mount c ." -c "c:" -c "pkzip -ea4 a.zip a" -c "exit"
      $ xxd -i -s 31 -l $(expr $(find A.ZIP -printf %s) - 100) A.ZIP
    */
    const ZEROS_REDUCED: [u8; 1297] = [
        0xc2, 0x3f, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x58, 0x07, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x01, 0x0f,
        0x06, 0x11, 0x31, 0x21, 0x1f, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x04, 0x99, 0x00, 0x00, 0x00, 0x00, 0x20, 0x80, 0xbc, 0x01, 0xc4, 0x5d, 0x1a,
        0x5a, 0x98, 0x50, 0x06, 0x49, 0xcc, 0xb9, 0xd1, 0x91, 0x11, 0x65, 0x20, 0x68, 0x73, 0x04,
        0x08, 0x24, 0x5d, 0x19, 0x51, 0x06, 0x02, 0x99, 0x06, 0x08, 0x6c, 0x61, 0x84, 0x9c, 0x5b,
        0x1d, 0x1d, 0x02, 0xf9, 0x76, 0x46, 0x36, 0x46, 0x57, 0x96, 0x26, 0x40, 0x86, 0x11, 0x65,
        0x61, 0x90, 0x6c, 0x00, 0x40, 0xb8, 0xd1, 0xcd, 0xd5, 0x09, 0x61, 0x65, 0x02, 0x64, 0x9d,
        0xf0, 0x06, 0x42, 0x40, 0xca, 0xb9, 0x81, 0x10, 0x20, 0x90, 0x69, 0x65, 0x04, 0x24, 0xdd,
        0x1b, 0x9a, 0x50, 0xa6, 0x4e, 0xc8, 0xd1, 0xb9, 0xcd, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x80, 0x00, 0xe9, 0x22, 0x50, 0x11, 0x11, 0x20, 0x68, 0x52, 0x49, 0x80, 0x40, 0x15,
        0x04, 0x00, 0x80, 0xf0, 0x26, 0x04, 0x08, 0x61, 0x41, 0x02, 0x24, 0x08, 0x00, 0x08, 0x4f,
        0x45, 0x00, 0x20, 0x48, 0x39, 0x09, 0x61, 0x45, 0x02, 0x1a, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x80, 0x00, 0x02, 0x09, 0x00, 0x00, 0x00, 0x00, 0x02, 0xa4, 0x1b, 0x00, 0x00, 0x80,
        0x00, 0xd2, 0x00, 0x08, 0x20, 0x90, 0x80, 0xa0, 0x22, 0x0e, 0x00, 0x01, 0x24, 0x00, 0x00,
        0x00, 0x00, 0x20, 0x77, 0x61, 0x53, 0x6f, 0x50, 0x45, 0x90, 0x70, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x28, 0x00, 0x80, 0x00, 0x09,
        0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xef, 0xbb, 0xbf, 0x0d, 0x28, 0xf7, 0xad,
        0x5a, 0xd9, 0x31, 0xe9, 0x51, 0x1d, 0xc1, 0x62, 0xe8, 0x59, 0x10, 0x2d, 0xf4, 0xf6, 0xed,
        0x1a, 0x88, 0x35, 0x33, 0xd2, 0xb0, 0x6d, 0xd9, 0x90, 0x2e, 0x0b, 0xc5, 0xe6, 0xf1, 0x2a,
        0x2d, 0x9b, 0xa7, 0x0d, 0xdb, 0x16, 0x84, 0xd0, 0xb8, 0x56, 0x76, 0x2e, 0xdc, 0xb2, 0x61,
        0xc0, 0x06, 0x36, 0x90, 0x4a, 0xd3, 0x88, 0x65, 0xf0, 0x97, 0x34, 0xa2, 0x19, 0x50, 0x3a,
        0xea, 0x75, 0x30, 0xc0, 0x27, 0x8c, 0xf3, 0x14, 0x03, 0x0c, 0xee, 0xa8, 0xe0, 0x69, 0x00,
        0xef, 0xa8, 0xea, 0xe6, 0x42, 0x32, 0x10, 0xdd, 0x30, 0xe1, 0x1c, 0x84, 0xb6, 0x81, 0x6d,
        0xdf, 0xce, 0x51, 0x66, 0x2a, 0xb9, 0x48, 0x67, 0x01, 0x1f, 0x24, 0x20, 0xbd, 0xfb, 0x86,
        0x6c, 0xc9, 0x20, 0x52, 0x37, 0x09, 0x72, 0x0c, 0x30, 0x12, 0x46, 0x03, 0x48, 0x0c, 0x22,
        0xd9, 0xe8, 0x33, 0xca, 0x06, 0xca, 0xe1, 0x1c, 0xcb, 0xf9, 0x98, 0xa6, 0x7d, 0xd3, 0x39,
        0x00, 0x91, 0xbf, 0x2d, 0x6b, 0x87, 0xba, 0x10, 0x64, 0xd6, 0x1b, 0x83, 0x6c, 0x73, 0x1e,
        0xc7, 0x18, 0x6e, 0x1e, 0xd3, 0x94, 0x85, 0x67, 0xd3, 0xda, 0xe1, 0x69, 0x92, 0xbc, 0xf3,
        0x3c, 0x0c, 0x2a, 0x87, 0x2d, 0x90, 0xb0, 0x9a, 0xa6, 0x0d, 0xac, 0x93, 0x19, 0x07, 0x7a,
        0xe9, 0xa0, 0x6d, 0x50, 0x20, 0x24, 0x03, 0x74, 0x30, 0x4d, 0x3b, 0xb6, 0x8c, 0x00, 0x34,
        0x6e, 0x98, 0x6d, 0x9d, 0x8d, 0x04, 0x8f, 0x74, 0x9c, 0xc6, 0x0d, 0x70, 0x22, 0xe1, 0x0d,
        0x32, 0x65, 0x9b, 0x16, 0x12, 0xf4, 0xe9, 0x04, 0x40, 0x97, 0x67, 0xac, 0xd0, 0x72, 0xf9,
        0x86, 0x67, 0x5d, 0x08, 0x32, 0xc9, 0xcc, 0x79, 0x32, 0x88, 0x00, 0xee, 0x26, 0x56, 0xb6,
        0x6f, 0xc7, 0x86, 0x85, 0xb4, 0x08, 0xc8, 0x13, 0x1f, 0x0d, 0x50, 0x03, 0x24, 0x8b, 0xa0,
        0x22, 0xb0, 0x39, 0x48, 0x34, 0xda, 0xe1, 0x74, 0xdf, 0x82, 0x1c, 0xb3, 0xc7, 0xae, 0x41,
        0x96, 0x40, 0xcb, 0xa6, 0x77, 0x21, 0x5b, 0xac, 0x8c, 0x91, 0xd2, 0x72, 0xf3, 0xe0, 0x13,
        0x6b, 0x79, 0x72, 0x03, 0x00, 0x18, 0xe4, 0x02, 0x2e, 0x31, 0x9a, 0x01, 0x9a, 0x66, 0x1a,
        0x08, 0x6f, 0x05, 0x59, 0x56, 0xec, 0xdb, 0xb7, 0x6b, 0x2e, 0x21, 0xad, 0x18, 0xb2, 0x44,
        0x72, 0x9a, 0xb2, 0xa1, 0x8e, 0x29, 0xe4, 0x21, 0x4d, 0x3b, 0xa8, 0x8e, 0xfc, 0x86, 0x3a,
        0xb2, 0x41, 0xbe, 0xd4, 0xb2, 0x6c, 0x18, 0x66, 0x3b, 0x11, 0x42, 0x1d, 0x3a, 0xd1, 0x8e,
        0x6d, 0xc5, 0x90, 0xc6, 0xe4, 0xe4, 0xe0, 0x80, 0xdc, 0x82, 0x3c, 0x12, 0x34, 0x12, 0x53,
        0x23, 0x43, 0xd3, 0xd5, 0x40, 0x26, 0x4c, 0xad, 0x0a, 0x97, 0x4c, 0x40, 0xae, 0x03, 0x95,
        0x85, 0x4b, 0x17, 0xf2, 0xc0, 0xca, 0x4c, 0x18, 0x16, 0xca, 0xc0, 0xc4, 0xe4, 0x40, 0x2a,
        0x52, 0x26, 0x48, 0x0e, 0x7b, 0xb6, 0xac, 0x0e, 0xda, 0x8d, 0xb2, 0x4d, 0x63, 0xb4, 0x90,
        0xda, 0x35, 0x04, 0x18, 0x76, 0x4c, 0x90, 0xce, 0x39, 0x9d, 0x96, 0x11, 0x99, 0x8c, 0xa0,
        0x3a, 0xac, 0xa2, 0x51, 0x0b, 0x0e, 0xa4, 0xfa, 0xa9, 0x40, 0x10, 0xa2, 0x1a, 0x24, 0x05,
        0x3e, 0x19, 0x81, 0xa4, 0x8a, 0x34, 0x69, 0x0a, 0x04, 0xa5, 0x3e, 0x29, 0x15, 0x1d, 0x12,
        0x8f, 0xaa, 0x58, 0xa4, 0x45, 0x3c, 0x02, 0xd1, 0x42, 0x4f, 0x4f, 0x4b, 0x46, 0x1a, 0xd4,
        0xc4, 0xb4, 0x28, 0x15, 0xaa, 0x40, 0x48, 0x82, 0x87, 0x2c, 0xa2, 0x4b, 0x87, 0x78, 0x74,
        0x02, 0x1b, 0x5e, 0x0e, 0xe1, 0x04, 0x0d, 0x25, 0x8f, 0x44, 0xd3, 0x86, 0xb1, 0x1b, 0xbb,
        0x50, 0xd9, 0x30, 0x42, 0x8a, 0x0f, 0xaa, 0x48, 0x06, 0x49, 0x45, 0x8f, 0x8a, 0x12, 0xcd,
        0x82, 0x04, 0x35, 0xc8, 0x03, 0x4d, 0x2c, 0xa0, 0xd4, 0x24, 0xa7, 0x43, 0x8b, 0x42, 0x02,
        0x1f, 0x91, 0x6e, 0x0a, 0x92, 0xba, 0xc4, 0x8a, 0xa6, 0x06, 0xf8, 0x83, 0x30, 0xc3, 0x83,
        0x91, 0xa1, 0x6f, 0x52, 0x50, 0xad, 0x12, 0x6e, 0x87, 0xc4, 0xa4, 0x06, 0x4e, 0x8d, 0x2d,
        0x23, 0x7b, 0x92, 0x0b, 0x9a, 0xed, 0xdc, 0x34, 0x08, 0xd0, 0x85, 0x41, 0x20, 0x8e, 0xd4,
        0x0c, 0x6c, 0x63, 0x05, 0x31, 0x24, 0x8e, 0x1d, 0x1a, 0x66, 0x66, 0x43, 0x97, 0x90, 0x14,
        0x03, 0x99, 0x41, 0x46, 0xee, 0xdb, 0xb7, 0x6d, 0xa0, 0xf0, 0x9c, 0xb0, 0x0c, 0x6b, 0xf2,
        0x42, 0x1e, 0x98, 0xe1, 0x81, 0x4c, 0x12, 0x24, 0xa5, 0xa4, 0x21, 0x08, 0xbe, 0x65, 0xfb,
        0x26, 0x37, 0x8a, 0xc3, 0x1c, 0xa2, 0x7d, 0x23, 0x14, 0x81, 0xcb, 0x4a, 0x52, 0x49, 0xd0,
        0x21, 0x24, 0xd5, 0xb5, 0x02, 0x3a, 0xdb, 0xd0, 0x2b, 0x39, 0x6c, 0xfb, 0x66, 0xa0, 0x4c,
        0x2f, 0xe4, 0x1a, 0x5e, 0x48, 0x0a, 0x85, 0x4c, 0xc0, 0x0d, 0x39, 0xa1, 0x1b, 0x52, 0x28,
        0xec, 0xac, 0xf0, 0x13, 0x52, 0x06, 0xa4, 0x42, 0x0a, 0xc1, 0x14, 0x24, 0x17, 0x7c, 0x04,
        0x81, 0x44, 0x23, 0x9b, 0x29, 0x07, 0x20, 0x2c, 0x0f, 0x42, 0x90, 0xd0, 0xee, 0x06, 0x87,
        0x96, 0x42, 0x8a, 0x42, 0x4a, 0x2b, 0x64, 0x63, 0x12, 0x52, 0x14, 0x84, 0x9c, 0x71, 0x0a,
        0x29, 0x11, 0x27, 0x94, 0x68, 0x84, 0x43, 0xd3, 0x00, 0xa3, 0xd4, 0x88, 0x96, 0x71, 0x9b,
        0x20, 0x82, 0x43, 0xb6, 0x58, 0x85, 0xec, 0x02, 0x33, 0xc1, 0x8a, 0x15, 0x42, 0x71, 0x69,
        0x85, 0x3c, 0xfc, 0x42, 0x1e, 0xa9, 0x86, 0xbc, 0xf1, 0x30, 0xe6, 0x75, 0xe5, 0x8e, 0x79,
        0xde, 0x30, 0x24, 0x13, 0x4b, 0x6c, 0x42, 0x0e, 0x3b, 0x96, 0xa8, 0xdc, 0xb0, 0x6d, 0x6a,
        0x1a, 0x81, 0x65, 0x3a, 0xf7, 0x4d, 0x87, 0x4d, 0x21, 0x87, 0xc5, 0x83, 0x6c, 0x13, 0x28,
        0x67, 0x20, 0x8a, 0x6d, 0xe3, 0xc1, 0xfb, 0x50, 0x26, 0xab, 0x9c, 0x54, 0x75, 0x8a, 0x85,
        0x4b, 0x0c, 0x62, 0x87, 0x7c, 0xb0, 0xc1, 0x62, 0xb2, 0xd1, 0x90, 0x45, 0xc4, 0x15, 0xa2,
        0xcc, 0x0f, 0xa4, 0x62, 0x1f, 0x21, 0x31, 0x45, 0x15, 0x72, 0x59, 0xba, 0x6c, 0xc4, 0x98,
        0xb5, 0x34, 0x10, 0x15, 0xba, 0x34, 0x1b, 0x16, 0x72, 0x58, 0x4f, 0x17, 0x79, 0x54, 0x04,
        0x5c, 0xa5, 0x59, 0x2c, 0x66, 0x54, 0xdd, 0xb2, 0x65, 0x84, 0x0a, 0xaf, 0xda, 0x28, 0xf6,
        0x98, 0x85, 0x6e, 0xf2, 0x2e, 0x08, 0xa8, 0x59, 0xc8, 0x72, 0x13, 0x86, 0xb2, 0x69, 0x9d,
        0x69, 0x74, 0x11, 0x9f, 0x98, 0x3e, 0x39, 0x85, 0x74, 0x4e, 0xa6, 0x6f, 0x48, 0x86, 0x43,
        0x10, 0x72, 0xd4, 0x0d, 0xa4, 0xd1, 0xba, 0x48, 0x26, 0x8b, 0x60, 0xd1, 0x29, 0x16, 0xe8,
        0x4d, 0x30, 0x2a, 0x1d, 0x72, 0xcd, 0xa4, 0x8b, 0x7c, 0x82, 0x42, 0x32, 0xd3, 0xa4, 0x20,
        0x16, 0x12, 0xb1, 0xee, 0x59, 0xb4, 0x90, 0xa3, 0x26, 0x20, 0x2f, 0x7c, 0x20, 0x21, 0x25,
        0x95, 0x9f, 0x58, 0x68, 0x24, 0xe7, 0x65, 0x34, 0x0d, 0x7b, 0xc2, 0xb9, 0xbe, 0x2e, 0xd2,
        0xe8, 0x49, 0x0a, 0x3b, 0x29, 0xe5, 0x14, 0xe4, 0x0c, 0x18, 0x27, 0x42, 0xfe, 0x07, 0xff,
        0x83, 0xff, 0xc1, 0xff, 0x77, 0xff, 0x01,
    ];

    #[test]
    fn test_expand_zeros() {
        let mut dst = VecDeque::new();
        let mut src_used = 0;
        hwexpand(
            &ZEROS_REDUCED,
            ZEROS_REDUCED.len(),
            2048 + 1024,
            4,
            &mut src_used,
            &mut dst,
        )
        .unwrap();
        assert_eq!(dst.len(), 2048 + 1024);
        for i in 0..(1 << 10) {
            assert_eq!(dst[(1 << 11) + i], 0);
        }
    }
}
